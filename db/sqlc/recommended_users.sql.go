// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: recommended_users.sql

package db

import (
	"context"
)

const getFollowingIds = `-- name: GetFollowingIds :many
SELECT following_id from networks
where follower_id =(?)
`

func (q *Queries) GetFollowingIds(ctx context.Context, followerID int32) ([]int32, error) {
	rows, err := q.query(ctx, q.getFollowingIdsStmt, getFollowingIds, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var following_id int32
		if err := rows.Scan(&following_id); err != nil {
			return nil, err
		}
		items = append(items, following_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMutual = `-- name: GetMutual :many
SELECT n1.following_id from networks as n1  
WHERE n1.follower_id  IN (
 SELECT n2.following_id from networks as n2
 WHERE n2.follower_id  = (?)
)
`

func (q *Queries) GetMutual(ctx context.Context, followerID int32) ([]int32, error) {
	rows, err := q.query(ctx, q.getMutualStmt, getMutual, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var following_id int32
		if err := rows.Scan(&following_id); err != nil {
			return nil, err
		}
		items = append(items, following_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :one
SELECT count(user_id) FROM profiles
`

func (q *Queries) GetUsers(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getUsersStmt, getUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const upsertUserRecommendations = `-- name: UpsertUserRecommendations :exec
INSERT INTO user_recommendations (user_id,recommend) VALUES (?,?)
ON DUPLICATE KEY UPDATE recommend  = (?)
`

type UpsertUserRecommendationsParams struct {
	UserID      int32  `json:"user_id"`
	Recommend   string `json:"recommend"`
	Recommend_2 string `json:"recommend_2"`
}

func (q *Queries) UpsertUserRecommendations(ctx context.Context, arg UpsertUserRecommendationsParams) error {
	_, err := q.exec(ctx, q.upsertUserRecommendationsStmt, upsertUserRecommendations, arg.UserID, arg.Recommend, arg.Recommend_2)
	return err
}
